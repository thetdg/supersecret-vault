#!/bin/bash
# SuperSecret Vault
# Author: Tanmoy Dasgupta (https://github.com/thetdg)

VERSION='0.6'
clear

folder_name=""

show_menu() {
    echo "================ SUPERSECRET VAULT ================"
    echo "Version: $VERSION"
    echo "1. Create or open a vault"
    echo "2. Encrypt files (Remove the un-encrypted ones)"
    echo "3. Decrypt files (Remove encrypted ones)"
    echo "4. Quit"
    echo "=================================================="
    echo
}


parse_arguments() {
    if [ $# -gt 0 ]; then
        folder_name=$1
        echo "Using vault: $folder_name"
        mkdir -p "$folder_name"
        if [ $? -ne 0 ]; then
            echo "Failed to create or access the specified vault directory. Exiting."
            exit 1
        fi
    fi
}

create_vault() {
    read -p "Enter the name of the vault (leave blank for default): " folder_name
    folder_name=${folder_name:-"supersecret_vault"}
    mkdir -p "$folder_name"
    if [ $? -eq 0 ]; then
        echo "Vault '$folder_name' created / opened successfully."
    else
        echo "Failed to create the vault. Check permissions."
    fi
}


show_progress_bar() {
    local current=$1
    local total=$2
    local width=50

    local progress=$((current * width / total))
    local remaining=$((width - progress))

    printf "\r["
    printf "%0.s=" $(seq 1 $progress)  # Print `=` for completed part
    printf "%0.s " $(seq 1 $remaining) # Print spaces for remaining part
    printf "] %d/%d" "$current" "$total"
}


prompt_password_confirmation() {
    while true; do
        read -s -p "Enter a password for the vault: " password
        echo
        read -s -p "Re-enter the password: " password_confirm
        echo
        if [ "$password" == "$password_confirm" ]; then
            break
        else
            echo "Passwords do not match. Try again."
        fi
    done
}


prompt_password() {
    read -s -p "Enter the password for the vault: " password
    echo
}


process_files() {
    local operation=$1
    local keep_original=$2
    local reencrypt=$3

    if [[ -z $folder_name ]]; then
        echo "No vault is set. Please create a vault first."
        return
    fi

    if [[ $operation == "encrypt" ]]; then
        prompt_password_confirmation
    else
        prompt_password
    fi

    local files=($(find "$folder_name" -type f))
    local total_files=${#files[@]}
    local processed=0
    local skipped=0
    local success=0

    echo "Processing files in the vault..."
    for file_name in "${files[@]}"; do
        ((processed++))
        show_progress_bar $processed $total_files

        file_type=$(file -b "$file_name" | awk '{print $1}')

        case $operation in
            encrypt)
                if [[ $file_type != "GPG" && $file_type != "PGP" ]]; then
                    if [ "$reencrypt" == "yes" ]; then
                        rm -f "$file_name.gpg"
                    fi
                    echo "$password" | gpg --batch -c --compress-algo none --passphrase-fd 0 "$file_name" >/dev/null 2>&1
                    if [ $? -eq 0 ]; then
                        ((success++))
                        if [ "$keep_original" == "no" ]; then
                            rm -f "$file_name"
                        fi
                    fi
                else
                    ((skipped++))
                fi
                ;;
            decrypt)
                if [[ $file_type == "GPG" || $file_type == "PGP" ]]; then
                    echo "$password" | gpg -d --batch --yes --passphrase-fd 0 "$file_name" > "${file_name%.gpg}" 2>/dev/null
                    if [ $? -eq 0 ]; then
                        ((success++))
                        if [ "$keep_original" == "no" ]; then
                            rm -f "$file_name"
                        fi
                    fi
                else
                    ((skipped++))
                fi
                ;;
        esac
    done
    echo
    echo "Operation complete."
    echo "Files processed: $processed"
    echo "Files successfully processed: $success"
    echo "Files skipped: $skipped"
}


while true; do
    show_menu
    read -p "Select an option (1-4): " choice
    case $choice in
        1) create_vault ;;
        2) process_files "encrypt" "no" "no" ;;
        3) process_files "decrypt" "no" "" ;;
        4) echo "Exiting SuperSecret Vault. Bye!" && exit 0 ;;
        *) echo "Invalid option. Please try again." ;;
    esac
    echo
done

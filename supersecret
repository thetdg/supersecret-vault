#!/bin/bash
# A vault for storing encrypted files (AES256 with GnuPG2)
# Author: Tanmoy Dasgupta (https://github.com/thetdg)

VERSION='0.2.1'

if [ $# -eq 1 ]; then
    folder_name=$1
    mkdir $folder_name
    if [ $? -eq 0 ]; then
        echo "Creating vault at '$folder_name'."
    fi
elif [ $# -eq 0 ]; then
    folder_name="supersecret_vault"
    mkdir $folder_name
    if [ $? -eq 0 ]; then 
        echo "No path is provided. Creating vault '$folder_name' in the current directory."
    fi
elif [ $# -gt 1 ]; then
    printf "Invalid syntax.\nPass in a directory name or run the programme without any argument to create a default vault directory.\n"
    exit 1
fi

echo
echo "Put the files you want to encrypt / decrypt in the vault."
echo "List of commands:"
echo "EK  to encrypt the unencrypted files in the vault      (and keep the unencrypted originals)"
echo "ER  to encrypt the unencrypted files in the vault      (and remove the unencrypted originals)"
echo "REK to (re)encrypt the unencrypted files in the vault  (and keep the unencrypted originals)"
echo "RER to (re)encrypt the unencrypted files in the vault  (and remove the unencrypted originals)"
echo "DK  to decrypt the encrypted files in the vault        (and keep the encrypted originals)"
echo "DR  to decrypt the encrypted files in the vault        (and remove the encrypted originals)"
echo "Q   to quit"
echo 

# Password
while true; do
    IFS= read -s  -p "Enter a password for the vault": password
    echo 
    IFS= read -s  -p "Re-enter the same password": password1
    echo
    if [ $password = $password1 ]; then
        echo 
        break
    else
        echo "Passwords do not match. Try again."
        echo
    fi
done

while true; do
    printf "Waiting for input: "
    read input

    # ENCRYPTION
    if [[ $input = "EK" ]] || [[ $input = "ER" ]] || [[ $input = "REK" ]] || [[ $input = "RER" ]]; then
        echo 
        # work on regular files ONLY
        OIFS="$IFS"
        IFS=$'\n'
        for file_name in $(find $folder_name -type f -name "*"); do
            full_file_loc="$file_name"
            # to determine if the file is already encrypted
            file_type=$(file -b $full_file_loc | awk '{print $1}')
            if [[ $file_type != 'GPG' ]]; then
                if [[ $input = "REK" ]] || [[ $input = "RER" ]]; then
                    rm $full_file_loc.gpg 
                    if [ $? -eq 0 ]; then
                        echo "Removed old encrypted file $full_file_loc.gpg"
                    fi
                fi
                # Do the actual encryption
                echo $password | gpg --batch -c --compress-algo none --passphrase-fd 0 $full_file_loc
                if [ $? -eq 0 ]; then
                    echo "Encrypted $full_file_loc to $full_file_loc.gpg"
                fi
                # delete the original unencrypted files
                if [[ $input = "ER" ]] || [[ $input = "RER" ]]; then
                    rm $full_file_loc
                    if [ $? -eq 0 ]; then
                        echo "Removed the unencrypted original $full_file_loc"
                    fi
                fi
            echo 
            fi
        done
        IFS="$OIFS"
        echo Done
    fi

    # DECRYPTION
    if [[ $input = "DK" ]] || [[ $input = "DR" ]]; then
        echo 
        # work on regular files ONLY
        OIFS="$IFS"
        IFS=$'\n'
        for file_name in $(find $folder_name -type f -name "*"); do
            full_file_loc="$file_name"
            # find encrypted files
            file_type=$(file -b $full_file_loc | awk '{print $1}')
            if [[ $file_type = 'GPG' ]]; then
                echo $password | gpg --batch --yes --passphrase-fd 0 $full_file_loc
                if [ $? -eq 0 ]; then
                    echo "Successfully decrypted $full_file_loc"
                fi
                # delete the original encrypted files
                if [ $input = "DR" ]; then
                    rm $full_file_loc
                    if [ $? -eq 0 ]; then
                        echo "Removed the encrypted original $full_file_loc"
                    fi
                fi
                echo 
            fi 
        done
        IFS="$OIFS"
    fi

    if [[ $input = "Q" ]] || [[ $input = "q" ]]; then
        echo "Quitting gracefully..."
        exit 0
    fi
done
